#ifndef ROS_AUTOCHARGE_ACTION_H
#define ROS_AUTOCHARGE_ACTION_H

#include "ros/ros.h" 
#include "tf/transform_broadcaster.h"
#include "tf/transform_listener.h"
#include <serial/serial.h>
#include "sensor_msgs/LaserScan.h"

#include <actionlib/server/simple_action_server.h>
#include <ros_autocharge_action/action1Action.h>

#include "reflector_detect/reflector_detect"


#define VISUAL_ANGLE             ((float)(150 * M_PI / 180.0))      //no use
#define ROUND_DISTANCE           ((float)1.0)                       //distance of Center alignment
#define ROUND_MIN                ((float)0.5)                       //minimum distance of Center alignment
#define ROUND_ANGLE_MAX          ((float)3.14)                      //max angle of Center alignment
#define PANNEL_LENGTH            ((float)0.17)
#define OBSTACLE_DISTANCE        ((float)0.0)
#define OBSTACLE_ANGLE_MIN       ((float)(-180 * M_PI / 180.0))      // start angle of obstacle detection
#define OBSTACLE_ANGLE_MAX       ((float)(180 * M_PI / 180.0))       // end angle of obstacle detection
#define OBSTACLE_DRADZONE        ((float)0.6)                       // ignore obstacle when pretouched the charger
#define PRETOUCH_DISTANCE        ((float)0.75)                      // slow down to touch the charger
#define MOVEBACK_DISTANCE        ((float)0.5)


typedef actionlib::SimpleActionServer<ros_autocharge_action::action1Action> AutoCharge_Server;


class ROSAutoCharge
{
    protected:


    public:
        enum StepEnum
        {
            STEP_INIT,
            STEP_FEEDBACK,
            STEP_SEARCH,
            STEP_ROUND,
            STEP_SPIN,
            STEP_AIMING,
            STEP_PRETOUCH,
            STEP_TOUCH,
            STEP_MOVEBACK,
            STEP_PREARRIVE,
            STEP_ARRIVESPIN,
            STEP_ARRIVE,
            STEP_CANCEL,
            STEP_SUCCESS,
            STEP_RECOVERY = 0xFE,
            STEP_ERROR = 0xFF
        };
        ROSAutoCharge();
        ~ROSAutoCharge();

        void executeCB(const ros_autocharge_action::action1GoalConstPtr &goal);
        void LaserScanCallback(const sensor_msgs::LaserScan::ConstPtr &scan);
        void loop();
        void start();
        void stop();
        void cancel();
        void shutdown();
        

        void setWaitStable(unsigned int sec);
        bool isStable();
        inline bool isEqual(double num1, double num2)
        {
            return (std::fabs(num1 - num2) <= 0.01);
        }

        void setASpeedAccParam(float acc = 1.57, float dec = 3.14){
            ASpeed_.facc = acc;
            ASpeed_.bacc = acc;
            ASpeed_.fdec = dec;
            ASpeed_.bdec = dec;
        }
        void setLSpeedAccParam(float acc = 0.5, float dec = 1){
            LSpeed_.facc = acc;
            LSpeed_.bacc = acc;
            LSpeed_.fdec = dec;
            LSpeed_.bdec = dec;
        }
        void setLSpeedWithAcc(float speed){
            float target;
            if(speed > fabs(lspeed_max_)) target = lspeed_max_;
            else if(speed <  -fabs(lspeed_max_)) target = -lspeed_max_;
            else target = speed;
            LSpeed_.setspeed = getAccSpeed(LSpeed_.facc, LSpeed_.fdec, LSpeed_.bacc, LSpeed_.bdec, target, LSpeed_.setspeed, LSpeed_.setspeed, period_.toSec());
        }
        void setASpeedWithAcc(float speed){
            float target;
            if(speed > fabs(aspeed_max_)) target = aspeed_max_;
            else if(speed <  -fabs(aspeed_max_)) target = -aspeed_max_;
            else target = speed;
            ASpeed_.setspeed = getAccSpeed(ASpeed_.facc, ASpeed_.fdec, ASpeed_.bacc, ASpeed_.bdec, target, ASpeed_.setspeed, ASpeed_.setspeed, period_.toSec());
        }
        void setLSpeed(float speed){
            float target;
            if(speed > fabs(lspeed_max_)) target = lspeed_max_;
            else if(speed <  -fabs(lspeed_max_)) target = -lspeed_max_;
            else target = speed;
            LSpeed_.setspeed = target;
        }
        void setASpeed(float speed){
            float target;
            if(speed > fabs(aspeed_max_)) target = aspeed_max_;
            else if(speed <  -fabs(aspeed_max_)) target = -aspeed_max_;
            else target = speed;
            ASpeed_.setspeed = target;
        }

        void setAllSpeedZero(){
            LSpeed_.setspeed = 0;
            ASpeed_.setspeed = 0;
        }

        void setAllSpeedZeroWithAcc(){
            LSpeed_.setspeed = getAccSpeed(LSpeed_.facc, LSpeed_.fdec, LSpeed_.bacc, LSpeed_.bdec, 0, LSpeed_.setspeed, LSpeed_.setspeed, period_.toSec());
            ASpeed_.setspeed = getAccSpeed(ASpeed_.facc, ASpeed_.fdec, ASpeed_.bacc, ASpeed_.bdec, 0, ASpeed_.setspeed, ASpeed_.setspeed, period_.toSec());
        }

        void publishZeroSpeed(){
            ASpeed_.setspeed = 0;
            LSpeed_.setspeed = 0;
            publishSpeed();
        }

        void publishSpeed(){
            cmd_vel_.linear.x = LSpeed_.setspeed;
            cmd_vel_.angular.z = ASpeed_.setspeed;
            cmd_pub_.publish(cmd_vel_);
        }
        
        unsigned int getStep();


    private:
        ros::NodeHandle nh_;
        tf::TransformListener listener_, laser_listener_;
        AutoCharge_Server *as_;
        ReflectorDetect reflector_;

        ros::Subscriber laser_scan_sub_;
        ros::Publisher cmd_pub_;

        std::string laser_topic_, cmd_vel_topic_, pannel_frame_id_, base_frame_id_, laser_frame_id_;

        tf::StampedTransform transform_;

        ros::Duration period_, motion_waittime_, stable_waittime_;
        ros::Duration scan_overtime_, pannel_overtime_, obstacle_overtime_, charge_overtime_;

        ros::Time search_time_, last_scan_time_, last_time_, tf_now_, tf_last_, last_stable_time_, cancel_time_, last_reflector_time_, last_charge_time_;

        geometry_msgs::Twist cmd_vel_;

        ros_autocharge_action::action1Feedback feedback_;
        ros_autocharge_action::action1Result result_;

        int state_;
        unsigned int step_;
        bool tf_rev_;
        bool have_obstacle_;
        bool wait_stable_;
        bool moveback_;
        bool scan_ready_;
        bool reflector_rev_;
        bool reflector_ok_;
        uint32_t mode_;
        geometry_msgs::Pose2D target_pose_;
        double spin_angle_;
        double round_target_x_;
        double round_x_min_;
        double round_angle_max_;

        float target_speed_, target_aspeed_, target_angle_;
        float facc_, fdec_, bacc_, bdec_;
        float x_, y_, z_, yaw_, x_temp_, y_temp_, yaw_temp_;
        float lspeed_max_, aspeed_max_;
        float angle_p_, aspeed_p_;
        

        struct acc_data
        {
            float facc, fdec, bacc, bdec;
            float targetspeed, setspeed;
        }LSpeed_, ASpeed_;
        
        std::string UARTPort_;
        int UARTBaudrate_;

        class ChargerUART *uart_;

        // param
        std::string movebase_polygon_str_;
        std::vector<float*> movebase_polygon_;
        float moveback_distance_;
        float visual_angle_;
        float round_distance_;
        float round_distance_min_;
        float round_angle_limit_;
        float pannel_length_;
        float obstacle_distance_;
        float obstacle_angle_min_;
        float obstacle_angle_max_;
        float obstacle_deadzone_;
        float pretouch_distance_;
        float pretouch_timeout_;
        float align_distance_;
        float align_aim_distance_min_;
        float prearrive_lspeed_;

        void StepChange(StepEnum nextstep);
        float getAccSpeed(float facc , float fdec , float bacc , float bdec , float target , float now_set, float real_value, double period);
};




class ChargerUART
{
    public:
        enum port_state : uint8_t
        {
            IDLE,
            INIT,
            OPENED,
            RETRY,
            ERROR
        };

        typedef struct
        {
            bool chargecheck;
            bool button1;
            bool button2;
            bool button3;
            bool button4;
        }ChargeDataTypedef;

        ChargerUART();
        ChargerUART(std::string uart_port, uint32_t baudrate);
        ChargerUART(std::string uart_port, uint32_t baudrate, float retry_interval, uint32_t retry_count);
        ~ChargerUART();

        void PortLoop();
        void ensurePortState()
        {
            state_ = INIT;
        }
        bool isOpen()
        {
            return (state_ == OPENED);
        }
        bool setSwitchState(bool state);
        bool getChargerData(ChargeDataTypedef &data);

    private:
        serial::Serial se_;
        std::string uart_port_;
        uint32_t baudrate_;

        enum port_state state_;

        bool wait_response_;

        ros::Time retry_time_;
        ros::Duration retry_interval_;
        uint32_t retry_count_;
        ros::Duration response_overtime_;

        void setRetry();
};

// #define EPS 1e-3
const double EPS = 1e-5;

const int NONE = 0;
const int CROSS = 1;
const int PARALLEL = 2;
const int COLLINEATION = 3;


typedef struct 
{
    double x, y;
}Point;

typedef struct
{
    Point p1, p2;
}Line;

bool isEqual(double num1, double num2, double eps = EPS);
bool PointIsONLine(Point p, Line l);
int CalCrossPoint(Line L1, Line L2, Point& P, double& length);


#endif